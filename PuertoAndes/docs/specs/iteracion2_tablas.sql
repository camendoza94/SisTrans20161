CREATE TABLE AREA_ALMACENAMIENTO(
ID_AREA INTEGER,
TIPO VARCHAR(255),
LLENO CHAR,
CONSTRAINT PK_ID_AREA PRIMARY KEY (ID_ALMACENAMIENTO),
CONSTRAINT NN_TIPO CHECK (TIPO IS NOT NULL),
CONSTRAINT NN_LLENO CHECK (LLENO IS NOT NULL),
CONSTRAINT CK_LLENO CHECK (LLENO IN (0,1))
);

CREATE TABLE EQUIPOS(
ID_EQUIPO INTEGER,
NOMBRE VARCHAR(255),
PRECIO REAL,
CAPACIDAD REAL,
DISPONIBLE CHAR,
CONSTRAINT PK_ID_EQUIPO PRIMARY KEY (ID_EQUIPO),
CONSTRAINT NN_NOMBRE CHECK (NOMBRE IS NOT NULL),
CONSTRAINT CK_PRECIO CHECK (CAPACIDAD>=0),
CONSTRAINT CK_CAPACIDAD CHECK (CAPACIDAD>=0),
CONSTRAINT NN_DISPONIBLE CHECK (DISPONIBLE IS NOT NULL),
CONSTRAINT CK_DISPONIBLE CHECK (DISPONIBLE IN (0,1))
);

CREATE TABLE BODEGAS(
ID_BODEGA INTEGER,
ANCHO REAL,
LARGO REAL,
PLATAFORMA CHAR,
SEPARACION_COLUMNA REAL,
CONSTRAINT PK_ID_BODEGA PRIMARY KEY (ID_BODEGA),
CONSTRAINT FK_ID_BODEGA FOREIGN KEY (ID_BODEGA)
      REFERENCES AREA_ALMACENAMIENTO (ID_AREA),
CONSTRAINT CK_ANCHO CHECK (ANCHO>=0),
CONSTRAINT CK_LARGO CHECK (LARGO>=0),
CONSTRAINT NN_PLATAFORMA CHECK(PLATAFORMA IS NOT NULL),
CONSTRAINT CK_PLATAFORMA CHECK (PLATAFORMA IN (0,1)),
CONSTRAINT CK_SEPARACION_COLUMNA CHECK (SEPARACION_COLUMNA>=0)
);


CREATE TABLE SILO(
ID_SILO INTEGER,
NOMBRE VARCHAR(255),
CAPACIDAD REAL,
CONSTRAINT PK_ID_SILO PRIMARY KEY(ID_SILO),
CONSTRAINT FK_ID_SILO FOREIGN KEY (ID_SILO)
        REFERENCES AREA_ALMACENAMIENTO (ID_AREA),
CONSTRAINT NN_NOMBRE CHECK(NOMBRE IS NOT NULL),
CONSTRAINT CK_CAPACIDAD CHECK (CAPACIDAD >=0)
);

CREATE TABLE COBERTIZO(
ID_COBERTIZO iNTEGER,
DIMEN REAL,
TIPO_CARGA VARCHAR(255),
CONSTRAINT PK_ID_COBERTIZO PRIMARY KEY (ID_COBERTIZO),
CONSTRAINT FK_ID_COBERTIZO FOREIGN KEY (ID_COBERTIZO)
      REFERENCES AREA_ALMACENAMIENTO (ID_AREA),
CONSTRAINT CK_DIMEN CHECK (DIMEN>=0),
CONSTRAINT NN_TIPO_CARGA CHECK(TIPO_CARGA IS NOT NULL)
);

CREATE TABLE PATIOS(
ID_PATIO INTEGER,
DIMEN REAL,
TIPO_CARGA VARCHAR(255),
CONSTRAINT PK_ID_PATIO PRIMARY KEY (ID_PATIO),
CONSTRAINT FK_ID_PATIO FOREIGN KEY (ID_PATIO)
  REFERENCES AREA_ALMACENAMIENTO (ID_AREA),
CONSTRAINT CK_DIMEN CHECK (DIMEN>=0),
CONSTRAINT NN_TIPO_CARGA CHECK (TIPO_CARGA IS NOT NULL)
);

CREATE TABLE CUARTO_FRIO(
ID_CUARTO INTEGER,
ID_BODEGA INTEGER,
AREA REAL,
LARGO REAL,
ALTURA REAL,
AREA_F_BODEGA REAL,
CONSTRAINT PK_ID_CUARTO PRIMARY KEY (ID_CUARTO),
CONSTRAINT FK_ID_BODEGA FOREIGN KEY (ID_BODEGA)
              REFERENCES BODEGAS (ID_BODEGA),
CONSTRAINT CK_AREA CHECK (AREA>=0),
CONSTRAINT CK_LARGO CHECK (LARGO>=0),
CONSTRAINT CK_ALTURA CHECK (ALTURA>=0),
CONSTRAINT CK_AREA_F_BODEGA CHECK (AREA_F_BODEGA>=0)
);

CREATE TABLE BUQUES(
ID_BUQUE INTEGER,
NOMBRE VARCHAR(255),
NOMBRE_AGENTE VARCHAR(255),
CAPACIDAD REAL,
LLENO CHAR,
TIPO_CARGA VARCHAR(255),
FECHA_INGRESO DATE,
FECHA_SALIDA DATE,
REGISTRO_CAPITANIA VARCHAR(255),
DESTINO VARCHAR(255),
ORIGEN VARCHAR(255),
TIPO_BUQUE VARCHAR(255),
CONSTRAINT PK_ID_BUQUE PRIMARY KEY (ID_BUQUE),
CONSTRAINT NN_NOMBRE CHECK (NOMBRE IS NOT NULL),
CONSTRAINT NN_NOMBRE_AGENTE CHECK (NOMBRE_AGENTE IS NOT NULL),
CONSTRAINT CK_CAPACIDAD CHECK (CAPACIDAD >=0),
CONSTRAINT NN_LLENO CHECK (LLENO IS NOT NULL),
CONSTRAINT CK_LLENO CHECK (LLENO IN (0,1)),
CONSTRAINT NN_TIPO_CARGA CHECK (TIPO_CARGA IS NOT NULL),
CONSTRAINT NN_FECHA_INGRESO CHECK (FECHA_INGRESO IS NOT NULL),
CONSTRAINT NN_FECHA_SALIDA CHECK (FECHA_SALIDA IS NOT NULL),
CONSTRAINT NN_REGISTRO_CAPITANIA CHECK (REGISTRO_CAPITANIA IS NOT NULL),
CONSTRAINT NN_DESTINO CHECK (DESTINO IS NOT NULL),
CONSTRAINT NN_ORIGEN CHECK (ORIGEN IS NOT NULL),
CONSTRAINT FK_TIPO_BUQUE FOREIGN KEY (TIPO_BUQUE)
          REFERENCES TIPO_BUQUE (TIPO)
);

CREATE TABLE TIPO_BUQUE(
TIPO VARCHAR(255),
CONSTRAINT PK_TIPO PRIMARY KEY (TIPO),
CONSTRAINT CK_TIPO CHECK (TIPO IN 'RORO' OR TIPO IN 'MULTIPROPOSITO' OR TIPO IN 'PORTACONTENEDORES')
);

CREATE TABLE CAMION(
ID_CAMION INTEGER,
NOMBRE VARCHAR(255),
CONSTRAINT PK_ID_CAMION PRIMARY KEY (ID_CAMION),
CONSTRAINT NN_NOMBRE CHECK (NOMBRE IS NOT NULL)
);

CREATE TABLE IMPORTADOR(
ID_USURARIO INTEGER,
REGISTRO_ADUANA VARCHAR(255) ,
TIPO VARCHAR(255),
CONSTRAINT PK_ID_USUARIO PRIMARY KEY (ID_USUARIO),
CONSTRAINT FK_ID_USUARIO FOREIGN KEY (ID_USUARIO)
        REFERENCES USUARIO (ID_USUARIO),
CONSTRAINT NN_REGISTRO CHECK (REGISTRO_ADUANA IS NOT NULL),
CONSTRAINT NN_TIPO CHECK (TIPO IS NOT NULL),
CONSTRAINT FK_TIPO FOREIGN KEY (TIPO)
    REFERENCES TIPO_IMPORTADOR (TIPO)
);

CREATE TABLE TIPO_IMPORTADOR(
TIPO VARCHAR(255),
CONSTRAINT PK_TIPO PRIMARY KEY (TIPO),
CONSTRAINT CK_TIPO CHECK (TIPO IN 'HABITUAL' OR TIPO IN 'NO_HABITUAL')
);



CREATE TABLE EXPORTADOR (
ID_USUARIO INTEGER,
RUT VARCHAR(255),
CONSTRAINT PK_ID_USUARIO PRIMARY KEY (ID_USUARIO),
CONSTRAINT FK_ID_USUARIO FOREIGN KEY (ID_USUARIO)
          REFERENCES USUARIO (ID_USUARIO),
CONSTRAINT UQ_RUT UNIQUE (RUT)
);



CREATE TABLE FACTURAS(
ID_FACTURA INTEGER,
FECHA DATE,
ID_EXPORTADOR INTEGER,
ID_BUQUE INTEGER,
CONSTRAINT PK_ID_FACTURA PRIMARY KEY (ID_FACTURA),
CONSTRAINT NN_ID_FECHA CHECK(FECHA IS NOT NULL),
CONSTRAINT FK_ID_EXPORTADOR FOREIGN KEY (ID_EXPORTADOR)
        REFERENCES EXPORTADOR (ID_EXPORTADOR),
CONSTRAINT FK_ID_BUQUE FOREIGN KEY (ID_BUQUE)
     REFERENCES BUQUES (ID_BUQUE)
);

CREATE TABLE CARGAS_ASOCIADAS_FACTURAS(
ID_FACTURA VARCHAR(255),
ID_MERCANCIA VARCHAR(255),
CONSTRAINT PK_FACTURA PRIMARY KEY (ID_FACTURA),
CONSTRAINT PK_MERCANCIA PRIMARY KEY (ID_MERCANCIA),
CONSTRAINT FK_FACTURA FOREIGN KEY (ID_FACTURA)
        REFERENCES FACTURAS (ID_FACTURA),
CONSTRAINT FK_MERCANCIA FOREIGN KEY (ID_MERCANCIA)
        REFERENCES MERCANCIA (ID_MERCANCIA)
);

CREATE TABLE MERCANCIA(
ID_MERCANCIA INTEGER,
ID_AREA_ALMACENAMIENTO INTEGER,
ID_CAMION INTEGER,
ID_BUQUE INTEGER,
PRECIO REAL,
FECHA DATE,
PROPOSITO VARCHAR(255),
CANTIDAD REAL,
PROPIETARIO VARCHAR(255),
CONSTRAINT PK_ID_MERCANCIA PRIMARY KEY (ID_MERCACIA),
CONSTRAINT FK_ID_AREA_ALMACENAMIENTO FOREIGN KEY (ID_AREA_ALMACENAMIENTO)
        REFERENCES AREA_ALMACENAMIENTO (ID_AREA),
CONSTRAINT FK_ID_CAMION FOREIGN KEY (ID_CAMION)
   REFERENCES CAMION (ID_CAMION),
CONSTRAINT FK_ID_BUQUE FOREIGN KEY (ID_BUQUE)
    REFERENCES BUQUES (ID_BUQUE),
CONSTRAINT CK_PRECIO CHECK (PRECIO>=0),
CONSTRAINT NN_FEHA CHECK (FECHA IS NOT NULL),
CONSTRAINT NN_PROPOSITO CHECK (PROPOSITO IS NOT NULL),
CONSTRAINT FK_PROPOSITO FOREIGN KEY (PROPOSITO)
      REFERENCES CLASE_MERCANCIA (CLASE),
CONSTRAINT CK_CANTIDAD CHECK (CANTIDAD>=0),
CONSTRAINT CK1 CHECK ((ID_CAMION IS NOT NULL AND ID_BARCO IS NULL AND ID_AREA_ALMACENAMIENTO IS NULL) 
                        OR (ID_BUQUE IS NOT NULL AND ID_CAMION IS NULL AND ID_AREA_ALMACENAMIENTO IS NULL)
                        OR (ID_AREA_ALMACENAMIENTO IS NOT NULL AND ID_BUQUE IS NULL AND ID_CAMION IS NULL) )
);


CREATE TABLE CLASE_MERCANCIA (
CLASE VARCHAR(255),
CONSTRAINT PK_CLASE PRIMARY KEY (CLASE),
CONSTRAINT CK_CLASE CHECK (CLASE = 'IMPORTACION' OR CLASE= 'EXPORTACION')
);

CREATE TABLE USUARIO(
ID_USUARIO INTEGER,
NOMBRE VARCHAR(255),
TIPO_PERSONA VARCHAR(255),
TIPO_USUARIO VARCHAR(255),
CONSTRAINT PK_ID_USUARIO PRIMARY KEY (ID_USUARIO),
CONSTRAINT NN_NOMBRE CHECK (NOMBRE IS NOT NULL),
CONSTRAINT NN_TIPO_PERSONA CHECK (TIPO_PERSONA IS NOT NULL),
CONSTRAINT FK_TIPO_PERSONA FOREIGN KEY (TIPO_PERSONA)
      REFERENCES TIPO_PERSONA (TIPO),
CONSTRAINT NN_TIPO_USUARIO CHECK (TIPO_USUARIO IS NOT NULL),
CONSTRAINT FK_TIPO_USUARIO FOREIGN KEY (TIPO_USUARIO)
        REFERENCES TIPO_USUARIO (TIPO)
);

CREATE TABLE TIPO_USUARIO(
TIPO VARCHAR(255),
CONSTRAINT PK_TIPO PRIMARY KEY (TIPO),
CONSTRAINT CK_TIPO CHECK (TIPO= 'OPERADOR_PORTUARIO')
);

CREATE TABLE TIPO_PERSONA(
TIPO VARCHAR(255),
CONSTRAINT PK_TIPO PRIMARY KEY (TIPO),
CONSTRAINT CK_TIPO CHECK (TIPO= 'JURIDICA' OR TIPO='NATURAL')
);


CREATE TABLE MUELLE(
ID_MUELLE INTEGER,
ID_BUQUE INTEGER,
NOMBRE VARCHAR(255),
CONSTRAINT PK_ID_MUELLE PRIMARY KEY (ID_MUELLE),
CONSTRAINT FK_ID_BUQUE FOREIGN KEY (ID_BUQUE)
      REFERENCES BUQUES (ID_BUQUE),
CONSTRAINT NN_NOMBRE CHECK (NOMBRE IS NOT NULL)
);

